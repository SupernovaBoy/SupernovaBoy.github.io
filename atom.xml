<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SupernovaBoy的小屋</title>
  
  <subtitle>记录点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-05T03:14:40.557Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SupernovaBoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图论入门简单重点小结</title>
    <link href="http://yoursite.com/2020/10/05/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%E9%87%8D%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2020/10/05/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%E9%87%8D%E7%82%B9%E5%B0%8F%E7%BB%93/</id>
    <published>2020-10-05T02:12:32.918Z</published>
    <updated>2020-10-05T03:14:40.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念及其关系"><a href="#基本概念及其关系" class="headerlink" title="基本概念及其关系"></a>基本概念及其关系</h3><h4 id="度，链接，平均度"><a href="#度，链接，平均度" class="headerlink" title="度，链接，平均度"></a>度，链接，平均度</h4><p>在无向图中某节点的度表示该节点与其他节点的连接个数。在<strong>无向图</strong>中链接数目与度还存在这种关系：</p><script type="math/tex; mode=display">L = \frac 1 2 \sum ^N_{i=1} k_i \qquad\qquad\qquad①</script><p>其中ki表示在图中第i个节点的度数，该公式将总链接数目L与每一个点的度数ki联系了起来。<a id="more"></a>而且在该公式中<strong>包含了自身到自身的一个链接</strong>至于为什么在这里乘以1/2是因为无向图中每一个链接都被计算了两次而在<strong>有向图</strong>中要联系总链接数与各个节点的度数，即可将出度和入度分开计算即可。例如：</p><script type="math/tex; mode=display">L = \sum^N_{i=1}k_{in} = \sum^N_{i=1}k_{out}\qquad\qquad\qquad②</script><p>在<strong>无向图</strong>中，平均度顾名思义即所有度的平均值，即</p><script type="math/tex; mode=display">\langle k \rangle = \frac 1 N \sum^N_{i=1}k_i = \frac {2L} N\qquad\qquad\qquad③</script><p>其中公式③为代入公式②后所得的式子，而在有向图中我们把公式③中的2去掉即可</p><h4 id="聚集系数"><a href="#聚集系数" class="headerlink" title="聚集系数"></a>聚集系数</h4><p>节点的聚类系数是度量某节点的两个邻居节点也互为邻居的平均概率。也就是以该节点为中心，其周围的邻居中相互之间存在边的个数 <strong>除以</strong> 该节点周围邻居节点对总数。可写为：</p><script type="math/tex; mode=display">C_i = \frac {节点i的邻居中直接相连的节点对的个数} {节点周围邻居节点对总数}</script><p>聚集系数描绘了一个概率问题，也就是如果我随机从i节点找两个邻居节点，聚集系数则为它们之间存在链接的一个概率。使用数学语言描述可以描述为：</p><script type="math/tex; mode=display">C_i = \frac {2L} {k_i(k_i-1)}\qquad\qquad\qquad④</script><p>同样和度的概念一样，既然有了针对一个节点的聚集系数，则我们可以引出对整个图，或者叫做网络中的平均聚集系数：</p><script type="math/tex; mode=display">\langle C \rangle = \frac 1 N \sum ^N_{i=1} C_i\qquad\qquad\qquad⑤</script><p>与聚集系数类似，平均聚集系数的概率解释可以描述为：<strong>在图中随机选择一个点，其邻居相连的概率</strong></p><h4 id="计算聚集系数"><a href="#计算聚集系数" class="headerlink" title="计算聚集系数"></a>计算聚集系数</h4><p>在Python中我们可以这样来计算一个无向图中点的聚集系数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_ci</span><span class="params">(G, u)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum([<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> G[u] <span class="keyword">for</span> y <span class="keyword">in</span> G[x] <span class="keyword">if</span> y <span class="keyword">in</span> G[u]]) / (G.degree[u] * (G.degree[u] - <span class="number">1</span>)) <span class="keyword">if</span> G.degree[u] &gt; <span class="number">1</span>\</span><br><span class="line">        <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在遍历字典的时候两两节点进行了重复计算1，所以我们在分母处也不用加上1/2，在这里如果该点度数为1则直接返回0。当然在networkx里面也集成了该功能，原理也是一样的。下面我们来举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_edge(<span class="string">'a'</span>, <span class="string">'b'</span>, weight = <span class="number">0.8</span>)</span><br><span class="line">G.add_edge(<span class="string">'a'</span>, <span class="string">'c'</span>, weight = <span class="number">0.5</span>)</span><br><span class="line">G.add_edge(<span class="string">'c'</span>, <span class="string">'d'</span>, weight = <span class="number">0.4</span>)</span><br><span class="line">G.add_edge(<span class="string">'c'</span>, <span class="string">'e'</span>, weight = <span class="number">0.7</span>)</span><br><span class="line">G.add_edge(<span class="string">'c'</span>, <span class="string">'f'</span>, weight = <span class="number">0.6</span>)</span><br><span class="line">G.add_edge(<span class="string">'a'</span>, <span class="string">'d'</span>, weight = <span class="number">0.3</span>)</span><br><span class="line">e_large = [(u, v) <span class="keyword">for</span> (u, v, d) <span class="keyword">in</span> G.edges(data=<span class="literal">True</span>) <span class="keyword">if</span> d[<span class="string">'weight'</span>] &gt; <span class="number">0.5</span>]</span><br><span class="line">e_small = [(u, v) <span class="keyword">for</span> (u, v, d) <span class="keyword">in</span> G.edges(data=<span class="literal">True</span>) <span class="keyword">if</span> d[<span class="string">'weight'</span>] &lt;= <span class="number">0.5</span>]</span><br><span class="line">pos = nx.spring_layout(G)  <span class="comment"># positions for all nodes</span></span><br><span class="line"><span class="comment"># nodes</span></span><br><span class="line">nx.draw_networkx_nodes(G, pos, node_size=<span class="number">700</span>)</span><br><span class="line"><span class="comment"># edges</span></span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=e_large, width=<span class="number">6</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=e_small, width=<span class="number">6</span>, alpha=<span class="number">0.5</span>, edge_color=<span class="string">'blue'</span>, style=<span class="string">'dashed'</span>)</span><br><span class="line"><span class="comment"># labels</span></span><br><span class="line">nx.draw_networkx_labels(G, pos, font_size=<span class="number">20</span>, font_color=<span class="string">'pink'</span>, font_family=<span class="string">'Consolas'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>该代码绘制结果为：<img src="/images/Figure_1.png" alt="绘制结果"></p><p>根据图片我们可以很简单的计算每个节点的聚集系数，当然程序的运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(cal_ci(G, <span class="string">'a'</span>))</span><br><span class="line">print(cal_ci(G, <span class="string">'b'</span>))</span><br><span class="line">print(cal_ci(G, <span class="string">'c'</span>))</span><br><span class="line">print(cal_ci(G, <span class="string">'d'</span>))</span><br><span class="line">print(cal_ci(G, <span class="string">'e'</span>))</span><br><span class="line">print(cal_ci(G, <span class="string">'f'</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">0.3333333333333333</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0.16666666666666666</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念及其关系&quot;&gt;&lt;a href=&quot;#基本概念及其关系&quot; class=&quot;headerlink&quot; title=&quot;基本概念及其关系&quot;&gt;&lt;/a&gt;基本概念及其关系&lt;/h3&gt;&lt;h4 id=&quot;度，链接，平均度&quot;&gt;&lt;a href=&quot;#度，链接，平均度&quot; class=&quot;headerlink&quot; title=&quot;度，链接，平均度&quot;&gt;&lt;/a&gt;度，链接，平均度&lt;/h4&gt;&lt;p&gt;在无向图中某节点的度表示该节点与其他节点的连接个数。在&lt;strong&gt;无向图&lt;/strong&gt;中链接数目与度还存在这种关系：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
L = \frac 1 2 \sum ^N_{i=1} k_i \qquad\qquad\qquad①&lt;/script&gt;&lt;p&gt;其中ki表示在图中第i个节点的度数，该公式将总链接数目L与每一个点的度数ki联系了起来。
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="学习小结" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>语言元素</title>
    <link href="http://yoursite.com/2020/02/24/%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/02/24/%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/</id>
    <published>2020-02-24T14:02:13.207Z</published>
    <updated>2020-10-05T02:14:08.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h3 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h3><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">“冯·诺依曼结构”</a>的计算机。<a id="more"></a>“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6" target="_blank" rel="noopener">维基百科</a>或者<a href="https://baike.baidu.com" target="_blank" rel="noopener">百度百科</a>科普一下。</p><blockquote><p>提示：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年1月，IBM向全世界发布了首款商业化量子计算机。</p></blockquote><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不能算作常用类型，大家了解下就可以了。</li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""使用变量保存数据并进行算术运算"""</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">print(a + b)</span><br><span class="line">print(a - b)</span><br><span class="line">print(a * b)</span><br><span class="line">print(a / b)</span><br><span class="line">print(a // b)</span><br><span class="line">print(a % b)</span><br><span class="line">print(a ** b)</span><br></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""使用type()检查变量的类型"""</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">'hello, world'</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line">print(type(a)) <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">print(type(b)) <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">print(type(c)) <span class="comment"># &lt;class 'complex'&gt;</span></span><br><span class="line">print(type(d)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(type(e)) <span class="comment"># &lt;class 'bool'&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">a = int(input(<span class="string">'a = '</span>))</span><br><span class="line">b = int(input(<span class="string">'b = '</span>))</span><br><span class="line">print(<span class="string">'%d + %d = %d'</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">'%d - %d = %d'</span> % (a, b, a - b))</span><br><span class="line">print(<span class="string">'%d * %d = %d'</span> % (a, b, a * b))</span><br><span class="line">print(<span class="string">'%d / %d = %f'</span> % (a, b, a / b))</span><br><span class="line">print(<span class="string">'%d // %d = %d'</span> % (a, b, a // b))</span><br><span class="line">print(<span class="string">'%d %% %d = %d'</span> % (a, b, a % b))</span><br><span class="line">print(<span class="string">'%d ** %d = %d'</span> % (a, b, a ** b))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> `\</td><td>`</td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code>`^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></td><td>（复合）赋值运算符</td></tr></tbody></table></div><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><p>下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""赋值运算符和复合赋值运算符"""</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span> <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line">print(a) <span class="comment"># 想想这里会输出什么</span></span><br></pre></td></tr></table></figure><p>下面的例子演示了比较运算符（关系运算符）、逻辑运算符和身份运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""比较、逻辑和算身份运算符的使用"""</span></span><br><span class="line"></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line">print(<span class="string">'flag0 ='</span>, flag0) <span class="comment"># flag0 = True</span></span><br><span class="line">print(<span class="string">'flag1 ='</span>, flag1) <span class="comment"># flag1 = True</span></span><br><span class="line">print(<span class="string">'flag2 ='</span>, flag2) <span class="comment"># flag2 = False</span></span><br><span class="line">print(<span class="string">'flag3 ='</span>, flag3) <span class="comment"># flag3 = False</span></span><br><span class="line">print(<span class="string">'flag4 ='</span>, flag4) <span class="comment"># flag4 = True</span></span><br><span class="line">print(<span class="string">'flag5 ='</span>, flag5) <span class="comment"># flag5 = False</span></span><br><span class="line">print(flag1 <span class="keyword">is</span> <span class="literal">True</span>) <span class="comment"># True</span></span><br><span class="line">print(flag2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""将华氏温度转换为摄氏温度"""</span></span><br><span class="line"></span><br><span class="line">f = float(input(<span class="string">'请输入华氏温度: '</span>))</span><br><span class="line">c = (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">print(<span class="string">'%.1f华氏度 = %.1f摄氏度'</span> % (f, c))</span><br></pre></td></tr></table></figure><h4 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""输入半径计算圆的周长和面积"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">radius = float(input(<span class="string">'请输入圆的半径: '</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * math.pi * radius</span><br><span class="line">area = math.pi * radius * radius</span><br><span class="line">print(<span class="string">'周长: %.2f'</span> % perimeter)</span><br><span class="line">print(<span class="string">'面积: %.2f'</span> % area)</span><br></pre></td></tr></table></figure><h4 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入年份 如果是闰年输出True 否则输出False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">year = int(input(<span class="string">'请输入年份: '</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span></span><br><span class="line">is_leap = (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> \</span><br><span class="line">           year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语言元素&quot;&gt;&lt;a href=&quot;#语言元素&quot; class=&quot;headerlink&quot; title=&quot;语言元素&quot;&gt;&lt;/a&gt;语言元素&lt;/h2&gt;&lt;h3 id=&quot;指令和程序&quot;&gt;&lt;a href=&quot;#指令和程序&quot; class=&quot;headerlink&quot; title=&quot;指令和程序&quot;&gt;&lt;/a&gt;指令和程序&lt;/h3&gt;&lt;p&gt;计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“冯·诺依曼结构”&lt;/a&gt;的计算机。
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>小巷</title>
    <link href="http://yoursite.com/2020/02/19/%E5%B0%8F%E5%B7%B7/"/>
    <id>http://yoursite.com/2020/02/19/%E5%B0%8F%E5%B7%B7/</id>
    <published>2020-02-18T16:00:44.164Z</published>
    <updated>2020-02-18T16:53:46.382Z</updated>
    
    <content type="html"><![CDATA[<p>小巷<br>又弯又长</p><p>没有门<br>没有窗</p><p>我拿把旧钥匙<br>敲着厚厚的墙</p><p>　　　　　　　　——顾城</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小巷&lt;br&gt;又弯又长&lt;/p&gt;
&lt;p&gt;没有门&lt;br&gt;没有窗&lt;/p&gt;
&lt;p&gt;我拿把旧钥匙&lt;br&gt;敲着厚厚的墙&lt;/p&gt;
&lt;p&gt;　　　　　　　　——顾城&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="诗歌" scheme="http://yoursite.com/categories/%E8%AF%97%E6%AD%8C/"/>
    
      <category term="现代" scheme="http://yoursite.com/categories/%E8%AF%97%E6%AD%8C/%E7%8E%B0%E4%BB%A3/"/>
    
    
      <category term="朦胧" scheme="http://yoursite.com/tags/%E6%9C%A6%E8%83%A7/"/>
    
  </entry>
  
  <entry>
    <title>到碗里来</title>
    <link href="http://yoursite.com/2020/02/16/%E5%88%B0%E7%A2%97%E9%87%8C%E6%9D%A5/"/>
    <id>http://yoursite.com/2020/02/16/%E5%88%B0%E7%A2%97%E9%87%8C%E6%9D%A5/</id>
    <published>2020-02-16T14:21:05.814Z</published>
    <updated>2020-10-04T09:12:05.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>该网站是属于<em>SupernovaBoy</em>小朋友的个人博客网站，不定期更新一些个人日志，杂文，专业方面文章，以及其他课外拓展内容。</p><p>文章会根据内容做好分类以及贴标签，大家可以在左边的导引栏中查看。其中标签一栏所示的是每篇文章末尾的标签，分类一栏展示的是文章标题下方所分类的名称。大家可以从标签及分类一栏查看相关文章及其时间轴，归档一栏所示的是所有文章的时间轴。<a id="more"></a></p><p>左边一栏下方还有头像，还可以旋转哦哈哈哈，个人觉得挺有意思的，下方列出了个人Github链接，大家可以查看。旁边的Email所示的是个人邮箱，再下方是网易云音乐链接，可以点击直接播放，当前只设置一首音乐<em>Ever after</em>，不喜勿喷啊哈哈，个人觉得这首音乐配上看文章挺搭的。首页看文章体验并不是那么好，点击文章标题可以进入文章页面，下方带有评论功能，欢迎大家来表达个人的想法，吐槽也行哈哈哈哈哈！文章底部左右两边带有左右翻页功能，可以手动翻页。细心的小伙伴可能注意到页面右下角有一个向上的箭头了，点击可以回到文章顶部。当文章比较长的时候就有的用了。而个人最喜欢的就是动态的背景网了，大家可以试试用鼠标靠近线条哦！挺好玩的！</p><p>另外，本网站是基于Hexo框架使用Github page搭建的，如果有想法也想自己建立一个网站的朋友可以私信我，一路上踩了许多坑，相信可以给你一些提示，少走些弯路哦！未来还会继续添加新的功能，背景会进行更改，敬请期待！</p><hr><h2 id="找到我"><a href="#找到我" class="headerlink" title="找到我"></a>找到我</h2><h3 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h3><p><img src="/images/qq.png" alt="alt QQ二维码"></p><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><p><img src="/images/wechat.png" alt="alt 微信二维码"></p><h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><p><img src="/images/wechat1.png" alt="alt 公众号二维码"></p><p>欢迎大家的关注哦！我会持续推出文章的!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;该网站是属于&lt;em&gt;SupernovaBoy&lt;/em&gt;小朋友的个人博客网站，不定期更新一些个人日志，杂文，专业方面文章，以及其他课外拓展内容。&lt;/p&gt;
&lt;p&gt;文章会根据内容做好分类以及贴标签，大家可以在左边的导引栏中查看。其中标签一栏所示的是每篇文章末尾的标签，分类一栏展示的是文章标题下方所分类的名称。大家可以从标签及分类一栏查看相关文章及其时间轴，归档一栏所示的是所有文章的时间轴。
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="介绍" scheme="http://yoursite.com/tags/%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
